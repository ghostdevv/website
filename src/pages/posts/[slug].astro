---
import SettingsModal from '$lib/components/posts/SettingsModal.svelte';
import { type CollectionEntry, getCollection } from 'astro:content';
import { faRss, faShare } from '@fortawesome/free-solid-svg-icons';
import PostTime from '$lib/components/posts/PostTime.svelte';
import Contents from '$lib/components/posts/Contents.svelte';
import Page from '$lib/layouts/Page.astro';
import { tweetLink } from '$lib/twitter';
import '$lib/layouts/post.scss';
import Fa from 'svelte-fa';

export async function getStaticPaths() {
	const blogPosts = await getCollection('blog');

	return blogPosts.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

const post = Astro.props.post as CollectionEntry<'blog'>;
const { Content, headings } = await post.render();
---

<Page frontmatter={post.data}>
	<article>
		<div class="meta">
			<h1>{post.data.title}</h1>

			<PostTime
				postedAt={post.data.postedAt}
				lastEdited={post.data.lastEdited}
			/>
		</div>

		<div class="split">
			<div class="markdown" id="post-body">
				<Content />
			</div>

			<aside class="contents">
				<h2 class="title">Table Of Contents</h2>

				<Contents client:visible headings={headings} />

				<div class="buttons">
					<SettingsModal client:load />

					<a href="/rss.xml" target="_blank" class="button icon">
						<Fa icon={faRss} />
					</a>
				</div>
			</aside>
		</div>

		<hr style="margin-top: 16px;" />

		<footer>
			{
				post.data.attribution && (
					<p class="attribution">{post.data.attribution}</p>
				)
			}

			<div class="footer-buttons">
				<a
					href={tweetLink(
						`Checkout this post by @onlyspaceghost!\n\nhttps://ghostdev.xyz/posts/${post.slug}`,
					)}
					title="Share on X (Twitter)"
					class="button icon"
					target="_blank"
				>
					<Fa icon={faShare} />
				</a>

				<a
					href="/rss.xml"
					title="RSS Feed"
					target="_blank"
					class="button icon"
				>
					<Fa icon={faRss} />
				</a>

				<SettingsModal client:load />
			</div>
		</footer>
	</article>
</Page>

<style lang="scss">
	@import 'src/lib/media';

	article {
		width: 100%;
		max-width: 100%;

		display: flex;
		flex-direction: column;
		gap: 16px;

		footer {
			width: 100%;
			padding-bottom: 16px;
			margin-top: 8px;

			display: grid;
			grid-template-rows: max-content;
			grid-template-columns: 1fr;
			gap: 12px;

			.footer-buttons {
				margin: 4px 0px;
			}

			@include media('>800px') {
				grid-template-columns: 1fr max-content;
				grid-template-rows: max-content;

				.attribution {
					color: rgba(var(--text-rgb), 0.8);
					line-height: 1.6;
					font-size: 14px;
					max-width: 600px;
					margin: 6px 0px;
				}

				.footer-buttons {
					grid-column: 2;
					grid-row: 1 / span 2;
					height: fit-content;
				}
			}
		}

		.split {
			display: grid;
			max-width: 100%;
			width: 100%;
			grid-template-columns: 1fr max(250px);
			gap: 80px;

			position: relative;

			@include media('<900px') {
				display: block;
			}
		}

		.markdown {
			width: 100%;
			max-width: 100%;
			overflow: auto;
		}

		.contents {
			display: flex;
			flex-direction: column;
			align-self: flex-start;
			align-items: flex-start;
			gap: 8px;

			position: sticky;
			top: 150px;

			@include media('<900px') {
				display: none;
			}

			.title {
				font-size: 1.4rem;
			}

			.buttons {
				margin-top: 16px;

				// display: flex;
				// flex-direction: row;
				// align-items: center;
			}
		}

		.meta {
			background-color: var(--background-secondary);
			border-radius: 22px;
			padding: 32px;

			margin-bottom: 32px;
		}
	}
</style>
